# @format

name: Release
on:
     push:
          tags:
               - "v*"
     workflow_dispatch:

jobs:
     create_release:
          runs-on: ubuntu-latest
          outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            release_id: ${{ steps.create_release.outputs.id }}
          steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{ github.ref_name }}
                release_name: "Blink v${{ github.ref_name }}"
                draft: true
                prerelease: false

     build:
          needs: create_release
          strategy:
               fail-fast: false
               matrix:
                    platform: [macos-latest, ubuntu-22.04, windows-latest]
          runs-on: ${{ matrix.platform }}
          environment: TAURI
          steps:
               - name: Checkout repository
                 uses: actions/checkout@v4

               - name: Install dependencies (ubuntu only)
                 if: matrix.platform == 'ubuntu-22.04'
                 # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
                 run: |
                      sudo apt-get update
                      sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev librsvg2-dev

               - name: Rust setup
                 uses: dtolnay/rust-toolchain@stable
                 with:
                      # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
                      targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

               - name: Rust cache
                 uses: swatinem/rust-cache@v2
                 with:
                      workspaces: "./src-tauri -> target"

               - uses: pnpm/action-setup@v3
                 name: Install pnpm
                 with:
                      version: 7
                      run_install: false

               - name: Get pnpm store directory
                 shell: bash
                 run: |
                      echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

               - uses: actions/cache@v4
                 name: Setup pnpm cache
                 with:
                      path: ${{ env.STORE_PATH }}
                      key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                      restore-keys: |
                           ${{ runner.os }}-pnpm-store-

               - name: Sync node version and setup cache
                 uses: actions/setup-node@v4
                 with:
                      node-version: "lts/*"
                      cache: "pnpm" # Set this to npm, yarn or pnpm.

               - name: Install app dependencies and build web
                 # Remove `&& yarn build` if you build your frontend in `beforeBuildCommand`
                 run: pnpm install --no-frozen-lockfile && pnpm run build # Change this to npm, yarn or pnpm.

               - name: Build the app
                 uses: tauri-apps/tauri-action@dev

                 env:
                      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
                      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
                      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
                      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
                 with:
                      releaseId: ${{ needs.create_release.outputs.release_id }}
                      tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
                      releaseName: "App Name v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
                      releaseBody: "See the assets to download and install this version."
                      releaseDraft: true
                      prerelease: false
                      args: ${{ matrix.platform == 'macos-latest' && '--target universal-apple-darwin' || '' }}

               # AppImage Generation (Ubuntu only)
               - name: Generate AppImage
                 if: matrix.platform == 'ubuntu-22.04'
                 run: |
                    sudo apt-get install -y libfuse2
                    wget -O appimage-builder.AppImage https://github.com/AppImageCrafters/appimage-builder/releases/download/v1.1.0/appimage-builder-1.1.0-x86_64.AppImage
                    chmod +x appimage-builder.AppImage
                    mkdir -p AppDir
                    cp -r src-tauri/target/release/bundle/deb/data/usr/* AppDir/
                    ./appimage-builder.AppImage --recipe appimage-builder.yml

               - name: Upload AppImage
                 if: matrix.platform == 'ubuntu-22.04'
                 uses: actions/upload-release-asset@v1
                 env:
                      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                 
                 with:
                      upload_url: ${{ needs.create_release.outputs.upload_url }}
                      asset_path: ./Blink*.AppImage
                      asset_name: Blink-${{ github.ref_name }}-x86_64.AppImage
                      asset_content_type: application/x-executable

               # Flatpak Generation (Ubuntu only)
               - name: Install Flatpak dependencies
                 if: matrix.platform == 'ubuntu-22.04'
                 run: |
                      sudo apt-get install -y flatpak flatpak-builder
                      flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
                      flatpak install -y flathub org.freedesktop.Platform//23.08 org.freedesktop.Sdk//23.08

               - name: Update Metainfo
                 if: matrix.platform == 'ubuntu-22.04'
                 run: |
                      # Get version without 'v' prefix
                      VERSION=${GITHUB_REF_NAME#v}
                      # Get current date in YYYY-MM-DD format
                      DATE=$(date +%Y-%m-%d)
                      # Update the release info in flatpak metainfo.xml
                      sed -i "s/<release version=\".*\" date=\".*\"\/>/<release version=\"$VERSION\" date=\"$DATE\"\/>/" .flatpak/com.github.prayag17.blink.metainfo.xml

               - name: Build Flatpak
                 if: matrix.platform == 'ubuntu-22.04'
                 run: |
                      flatpak-builder --repo=repo --force-clean build-dir .flatpak/com.github.prayag17.blink.yml
                      flatpak build-bundle repo blink.flatpak com.github.prayag17.blink

               - name: Upload Flatpak
                 if: matrix.platform == 'ubuntu-22.04'
                 uses: actions/upload-release-asset@v1
                 env:
                      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                 
                 with:
                      upload_url: ${{ needs.create_release.outputs.upload_url }}
                      asset_path: ./blink.flatpak
                      asset_name: Blink-${{ github.ref_name }}.flatpak
                      asset_content_type: application/x-flatpak
